#!/bin/sh
# Precompile python-dependent files for libgraphqlparser so that the gem doesn't
# need to know about python. This should run again every time

# Set minimum required versions
PYTHON_MINIMUM_MAJOR=2

# Get python references
PYTHON_REF=$(which python | grep "/python")

py_error_msg(){
    echo "Python $PYTHON_MINIMUM_MAJOR must be present."
    exit 1
}

python_ref(){
    local my_ref=$1
    echo $($my_ref -c 'import platform; major, minor, patch = platform.python_version_tuple(); print(major);')
}

check_version(){
    local major=$1
    local python_ref=$2
    [[ $major -ge $PYTHON_MINIMUM_MAJOR ]] || py_error_msg
}

if [[ ! -z $PYTHON_REF ]]; then
    version=($(python_ref python))
    check_version ${version[0]} $PYTHON_REF
else
    py_error_msg
fi

# Collect some path directories
BASE_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" > /dev/null 2>&1 && pwd)"
EXT_PATH=$(realpath "$BASE_PATH/../ext/libgraphqlparser")
PREC_PATH=$(realpath "$BASE_PATH/../ext/precompiled")

# Generate all files that depends on python
generate_file(){
  local name=$2
  local format=$1
  python "$EXT_PATH/ast/ast.py" "$1" "$EXT_PATH/ast/ast.ast" > "$PREC_PATH/$name"
  echo "Generated $name"
}

generate_file "cxx" "Ast.h"
generate_file "cxx_visitor" "AstVisitor.h"
generate_file "cxx_impl" "Ast.cpp"
generate_file "c" "GraphQLAst.h"
generate_file "c_impl" "GraphQLAst.cpp"
generate_file "c_visitor_impl" "GraphQLAstForEachConcreteType.h"
generate_file "cxx_json_visitor_header" "JsonVisitor.h.inc"
generate_file "cxx_json_visitor_impl" "JsonVisitor.cpp.inc"

echo "Precompile finished!"
